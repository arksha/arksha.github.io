---
layout: post
title: Word Search 引发的 Trie Tree 系列
date: 2015-12-09
categories: Leetcode
---

###Word Search ->[Leetcode传送门](https://leetcode.com/problems/word-search/)

题目：要把给定word在一个board里找出来。

回路：Just use backtracking method to revursively find the word. Using DFS to implement. When checked an element in the board, use "\#" to mark this has been visited and doesn't have to be checked again.   

###Word Search 2 ->[Leetcode传送门](https://leetcode.com/problems/word-search-ii/)
题目给了一个word表找出存在于board中的每一个单词。

回路：from the Word Search method, it is normal to follow the first method of Word Search to solve this problem. Just to check if every word in the list or not, call the function to do this. However, this could run out exceed time limit. Therefore, Trie Tree, this data structure can be used to solve this.

##What is Trie Tree##
Trie Tree, also call prefix tree（radix tree， digital tree，Yes =_= all those are the same thing！）. Trie for retrieval. It has node conatains character, its children have a common prefix. The root is associated with empty string, values only associated with leaves, and some inner nodes.
![trie](/images/postimg/2015-12-09-trie.png) from wiki

于是， 有到leetcode题目可以拿来练手辣～

###Implement Trie (Prefix Tree)->[leetcode传送门](https://leetcode.com/problems/implement-trie-prefix-tree/)
此题用来实现三个方法：Implement a trie with insert, search, and startsWith methods.
可以用HashMap来存node信息。

1.Trie Node 

由节点和是否为叶子节点组成。HashMap里用char来当key，value存储的是TrieNode节点。
	
	class TrieNode{
		char c;
		HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>(); 
		boolean isleaf;

		public TrieNode(){}
		public TrieNode(char c){
			this.c = c;
		}
	}
	
2.Trie Tree

有根节点和三个基本操作组成。
	
	public class Trie{
		private TrieNode root;
		public Trie(){
			root = new TrieNode();
		}
		public void insert(String word){}
		public boolean search(String word){}
		public boolean starsWith(String prefix){}
	}

3.Insert(String word)

遍历插入的字，如果在hashmap里查到的话就把map中的节点加到map中，不存在的话就新建节点加到map中。最后设定所有的叶节点的值。

	public void insert(String word) {
        HashMap<Character, TrieNode> children = root.children;
 
        for(int i=0; i<word.length(); i++){
            char c = word.charAt(i);
 
            TrieNode t;
            if(children.containsKey(c)){
                    t = children.get(c);
            }else{
                t = new TrieNode(c);
                children.put(c, t);
            }
 
            children = t.children;
 
            //set leaf node
            if(i==word.length()-1)
                t.isLeaf = true;    
        }
    }

4.search(String word)

遍历hashmap，从root开始查找，终结在叶节点或者是中间节点则是查找成功，否则不存在。使用searchNode（）来遍历hashmap，返回查找的最后一个节点。

	public boolean search(String word) {
        TrieNode t = searchNode(word);
 
        if(t != null && t.isLeaf) 
            return true;
        else
            return false;
    }

5.startsWith(String prefix)

若在遍历trie tree 的时候发现prefix最后的节点是空，则不存在树中。
	 
	 public boolean startsWith(String prefix) {
        if(searchNode(prefix) == null) 
            return false;
        else
            return true;
    }

6.searchNode(String str)

给定string，返回string最后的TrieNode。

	public TrieNode searchNode(String str){
        Map<Character, TrieNode> children = root.children; 
        TrieNode t = null;
        for(int i=0; i<str.length(); i++){
            char c = str.charAt(i);
            if(children.containsKey(c)){
                t = children.get(c);
                children = t.children;
            }else{
                return null;
            }
        }
 
        return t;
    }

###回来再看Word Search 2### 
绝对是follow up 的解法。这题好难> <,整理一下。

First, we need to implement trie Tree. We can simply use array of TrieNode instead of HashMap. Every node has at most 26 children, use a string to store word that node represents.

	class TrieNode{
   		public TrieNode[] children = new TrieNode[26];
    	public String item = "";
	}

Second, we implement Trie Tree just as we did before. To notice that, when traversal word, we can change String to a char array by using *.toCharArray()* function. use c-'a' to represent transformed index of char array.

	//Trie
	class Trie{
	    public TrieNode root = new TrieNode();
	 
	    public void insert(String word){
	        TrieNode node = root;
	        for(char c: word.toCharArray()){
	            if(node.children[c-'a']==null){
	                node.children[c-'a']= new TrieNode();
	            }
	            node = node.children[c-'a'];
	        }
	        node.item = word;
	    }
	 
	    public boolean search(String word){
	        TrieNode node = root;
	        for(char c: word.toCharArray()){
	            if(node.children[c-'a']==null)
	                return false;
	            node = node.children[c-'a'];
	        }
	        if(node.item.equals(word)){
	            return true;
	        }else{
	            return false;
	        }
	    }
	 
	    public boolean startsWith(String prefix){
	        TrieNode node = root;
	        for(char c: prefix.toCharArray()){
	            if(node.children[c-'a']==null)
	                return false;
	            node = node.children[c-'a'];
	        }
	        return true;
	    }
	}

然后可以照着之前1中的dfs方法来用trie tree来判断是否存在word。

	public class Solution {
	    Trie trie = new Trie();
	    Set<String> res = new HashSet<String>(); 
	    public List<String> findWords(char[][] board, String[] words) {
	        
	         int m=board.length;
	         int n=board[0].length;
	        boolean mark[][] = new boolean[m][n];
	        for (int i = 0;i<words.length;i++)
	        {
	            trie.insert(words[i]);
	        }
	        for (int i = 0;i<board.length;i++)
	        {
	            for (int j = 0;j<board[0].length;j++)
	            {
	                dfs(board,"",i,j,trie,mark);
	            }
	        }
	     return new ArrayList<String>(res);   
    	}
	    public void dfs(char[][] board,String str, int i,int j,Trie trie,boolean mark[][]){
	        int m=board.length;
	        int n=board[0].length;
	        
	        if(i<0||i>=m||j<0||j>=n)
	            return;
	        if(mark[i][j])//剪枝，访问过了用true
	            return;
	        str += board[i][j];
	        if(!trie.startsWith(str))
	            return;
	        if(trie.search(str))
	            if(!res.contains(str))
	            res.add(str);
	        mark[i][j] = true;
	        dfs(board,str,i-1,j,trie,mark);
	        dfs(board,str,i+1,j,trie,mark);
	        dfs(board,str,i,j+1,trie,mark);
	        dfs(board,str,i,j-1,trie,mark);
	        mark[i][j] = false;
	        
	    	}
	}

在实现时出现了res应不应该当做一个参数传到dfs里。如果传了，会有个重复的case失败，因为输出了同样的字比如\["a"，"a"\] 尽管board里只有aa。如果用一个HashSet可以先判断是否重复，如果重复就不要加到res中了，然后在最后返回的时候new 一个Arraylist把所有的HashSet里的string都加进去返回最终的结果。

以上，这题还有另外一个问题。在Hint中有提到：<br/>
You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?<br/>
If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie?<br/>
用trie 完全可以解决这些了。

好吧最后一个题是<br/>
###Add and Search Word - Data structure design ->[Leetcode传送门](https://leetcode.com/problems/add-and-search-word-data-structure-design/)

好累明天再写总结orz
