---
layout: post
title: BFS
date: 2016-01-26
categories: Leetcode
---


##
[word-ladder](https://leetcode.com/problems/word-ladder/)
 
**Solution**
- BFS
- use hashmap to reduce repeat elements
- use queue to implement BFS

```
public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        if(wordList.size()==0||wordList==null) return 0;
        HashSet<String> hash = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        hash.add(beginWord);
        int length = 1;
        while(!q.isEmpty()){
            length++;
            int size = q.size();
            for(int i = 0;i<size;i++){
                String word = q.poll();
                for(String next: getnext(word,wordList)){
                    if(hash.contains(next))
                        continue;
                    if(next.equals(endWord))
                        return length;
                    hash.add(next);
                    q.offer(next);
                }
            }
        }
        return 0;
    }
    private String replace(String s, int index, char c) {
        char[] chars = s.toCharArray();
        chars[index] = c;
        return new String(chars);
    }
    private ArrayList<String> getnext(String word,Set<String> wordList){
        ArrayList<String> nextWords = new ArrayList<String>();
        for (char c = 'a'; c <= 'z'; c++) {
            for (int i = 0; i < word.length(); i++) {
                if (c == word.charAt(i)) {
                    continue;
                }
                String nextWord = replace(word, i, c);
                if (wordList.contains(nextWord)) {
                    nextWords.add(nextWord);
                }
            }
        }
        return nextWords;
    }
}
```
